[alias]
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Remove branches that have already been merged with master
	delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# list commits for rebase -i with log: e.g. git rebase -i upstream == git log-rebase upstream..HEAD
	# especially useful if you want to exclude several feature branches: git log-rebase HEAD ^feature1 ^feature2
	rebase-log = log --reverse --no-merges --oneline --pretty=format:'%C(bold yellow)pick %C(bold cyan)%h %C(magenta)%s %C(green)(%cr) %C(bold blue)<%an> %C(red)%d%Creset%Creset'

	last = log -1 HEAD
	serve = daemon --reuseaddr --base-path=. --export-all --verbose
	stash-unapply = !git stash show -p | git apply -R
	graphs = log --graph --oneline --all --decorate
	graph = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --date-order
	graphc = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --date-order
	graphstash = !"git graph $(git reflog show --format="%h" stash)"
	logf = log --follow
	delete-remote-branch = push origin --delete
	pu = !"git fetch origin -v; git fetch upstream -v; git merge --ff-only upstream/master"
	pull-all = !"for b in $(git for-each-ref refs/heads --format='%(refname)') ; do git checkout ${b#refs/heads/} ; git pull --ff-only ; done"
	pull-all-repos = !"for r in */ ; do pushd \"$r\" ; git pull ; popd ; done"
	unreleased-changes = !"LTAG=$(git describe --tags --abbrev=0) && git log $LTAG.."

	wdiff = diff --color-words=.

[apply]
	# Detect whitespace errors when applying a patch
	# whitespace = fix


[core]
	editor = vim
	autocrlf = input
	safecrlf = warn

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto


[status]
	submoduleSummary = true


[diff]
	# Detect copies as well as renames
	renames = copies
	mnemonicprefix = true
	submodule = log


[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 20


[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = vimdiff


[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = simple


[fetch]
	prune = true
